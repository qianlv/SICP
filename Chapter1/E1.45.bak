#lang sicp

; We saw in Section 1.3.3 that attempting to compute square
; roots by naively finding a fixed point of y -> x/y does not
; converge, and that this can be fixed by average damping.
; The same method works for finding cube roots as fixed points
; of the average-damped y -> x/y2. Unfortunately, the process
; does not work for fourth roots—asingle average damp is not
; enough to make a fixed-point search for y -> x/y3 converge.
; On the other hand, if we average damp twice (i.e., use the
; average damp of the average damp of y -> x/y3) the fixed-point
; search does converge. Do some experiments to determine how many
; average damps are required to compute nth roots as a fixed-point
; search based upon repeated average damping of y -> x/y^(n−1).
; Use this to implement a simple procedure for computingnth roots
; using fixed-point, average-damp, and the repeated procedure of
; Exercise 1.43. Assume that any arithmetic operations you need are
; available as primitives.

(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average x y)
  (/ (+ x y) 2))
(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (repeated f n)
  (cond ((<= n 0)
         (error "n must be greater than 0"))
        ((= n 1)
         (lambda (x) (f x)))
        (else
         (lambda (x) (f ((repeated f (dec n)) x))))))

(define (n-root x n)
  (fixed-point
   ((repeated average-damp (dec n))
    (lambda (y) (/ x (expt y (dec n))))))
  1.0)

(n-root 4 2)